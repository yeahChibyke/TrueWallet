// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {TrueWallet} from "../src/Truewallet.sol";
import {Test, console2} from "forge-std/Test.sol";

contract TrueWalletTest is Test {
    TrueWallet trueWallet;
    address payable trueOwner;

    function setUp() external {
        // Simulate an external true owner
        trueOwner = payable(address(1)); // Example address, choose as needed

        // Assign some ETH to the true owner for testing
        vm.deal(trueOwner, 10 ether);

        // Simulate deploying the contract from the external true owner's address
        vm.startPrank(trueOwner);
        trueWallet = new TrueWallet();
        vm.stopPrank();
    }

    function testTrueOwnerIsMsgSender() public {
        assertEq(trueWallet.trueOwner(), trueOwner);
    }

    function testInitialOwner() public {
        assertEq(trueWallet.trueOwner(), trueOwner);
    }

    function testBalance() public {
        assertEq(trueWallet.getBalance(), address(trueWallet).balance);
    }

    function testReceiveETH() public {
        // initial balance
        uint256 initialBalance = address(trueWallet).balance;

        // send 1 ether to TrueWallet contract
        vm.deal(address(trueWallet), 1 ether);

        // final balance
        uint256 finalBalance = address(trueWallet).balance;

        // assert
        assertEq(
            finalBalance,
            initialBalance + 1 ether,
            "Balance did not increase by 1 ETH!"
        );
    }

    function testReceiveFunds() public {
        payable(address(trueWallet)).transfer(1 ether);
        assertEq(address(trueWallet).balance, 1 ether);
    }

    function testWithdrawByOwner() public {
        // Ensure the test contract has enough ether to send
        uint256 testContractInitialBalance = address(this).balance;
        require(
            testContractInitialBalance >= 1 ether,
            "Test contract does not have enough ether"
        );
        console2.log(testContractInitialBalance);

        // Send 1 ether to the TrueWallet contract
        payable(address(trueWallet)).transfer(1 ether);

        // Check TrueWallet's balance to ensure it has received the ether
        uint256 trueWalletBalance = address(trueWallet).balance;
        assertEq(
            trueWalletBalance,
            1 ether,
            "TrueWallet did not receive the ether"
        );
        console2.log(trueWalletBalance);

        // Check initial balance of trueOwner
        uint256 initialBalance = trueOwner.balance;
        console2.log(initialBalance);

        // Simulate action as trueOwner
        vm.prank(trueOwner);
        trueWallet.withdraw(1 ether);

        // Check final balance of trueOwner
        uint256 finalBalance = trueOwner.balance;
        assertEq(
            finalBalance,
            initialBalance + 1 ether,
            "trueOwner's balance did not increase as expected."
        );
        console2.log(finalBalance);
    }

    function testWithdrawByNonOwnerShouldFail() public {
        payable(address(trueWallet)).transfer(1 ether);
        address nonOwner = address(2); // An example non-owner address

        // Expect the transaction to revert for non-owner
        vm.startPrank(nonOwner);
        vm.expectRevert("caller is not trueOwner");
        trueWallet.withdraw(1 ether);
        vm.stopPrank();
    }

    function testWithdrawMoreThanBalanceShouldFail() public {
        // Send 0.5 ether to the TrueWallet contract
        payable(address(trueWallet)).transfer(0.5 ether);

        // Attempt to withdraw more than the balance by trueOwner
        vm.startPrank(trueOwner);
        vm.expectRevert();
        trueWallet.withdraw(1 ether); // Attempting to withdraw more than the current balance
        vm.stopPrank();
    }
}
